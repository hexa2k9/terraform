name: Build Terraform Images

on:
  schedule:
    - cron: "0 5 * * 5"
  push:
    branches: ["main"]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      terraform: ${{ steps.dataStep.outputs.terraform }}
    steps:
      - id: dataStep
        run: |
          export VERSIONS=[$(curl -sS -L -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/hashicorp/terraform/releases?per_page=100 | jq -r '.[] | select(.prerelease == false) | "\"" + .name + "\""' | sort -uV | tr -d "^v" | tr '\n' ',' | sed 's#,$##')]
          echo "terraform=$(jq -cn --argjson terraform "$VERSIONS" '{version: $terraform}')" >> $GITHUB_OUTPUT

  build-base:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        with:
          file: Dockerfile.base
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base
          labels: ${{ steps.meta.outputs.labels }}

  build-terraform:
    runs-on: ubuntu-latest
    needs: ["setup", "build-base"]
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.terraform) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@369eb591f429131d6889c46b94e711f089e6ca96 # v5.6.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.version }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        with:
          file: Dockerfile.terraform
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: |
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.version }}
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ matrix.version }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            TF=${{ matrix.version }}
            CODE_BASE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:base
